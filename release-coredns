#!/bin/bash -e

# This release script downloads the latest Go and CoreDNS, sets things up and
# then calls into the Makefile to do the release. This script must be
# pre-configured on the (Linux) machine doing the release.
#
# Synopsis
# release-coredns [-t] [BRANCH]
#
# -t: test run, only compile, don't upload anything
# BRANCH is optional branch to use for the release; defaults to 'master'.

PROG=$(basename $0)

DOCKER=${DOCKER:-miek}
GITHUB=coredns/coredns
BRANCH=master
TESTING=

if [[ "$1" == "-t" ]]; then
    TESTING=ON
    shift
fi
if [[ -z "$1" ]]; then
    echo "$PROG: Need branch as first argument"
fi
BRANCH="$1"
if [[ -z "$2" ]]; then
    echo "$PROG: Need version as second argument"
fi
WANTVERSION="$2"

# latestGO downloads the latest version of Go (or used a cached download from /tmp).
function latestGo {
    local TEMP="$1"

    local LATEST=$(curl -s https://golang.org/VERSION?m=text)
    local GOLANG=https://dl.google.com/go/${LATEST}.linux-amd64.tar.gz

    TAR=$(basename $GOLANG)

    ( cd $TEMP
        if [[ ! -e /tmp/$TAR ]]; then
            echo "$PROG: Downloading: $GOLANG"

            wget -q $GOLANG
            cp $TAR /tmp

        else
            echo "$PROG: Using cached version of: $GOLANG"

            cp /tmp/$TAR .
        fi
    )
}

# setupGo extracts Go and exports GOROOT and GOPATH to get a compile confined to the tmp dir.
function setupGo {
    local TEMP="$1"

    echo "$PROG: Setting up Go in $TEMP"

    ( cd $TEMP; tar xf $TAR )
    export GOROOT=$TEMP/go
    export GOPATH=$TEMP/g
    export GOBIN=${GOPATH}/bin
    export PATH=$GOBIN:$PATH
    export PATH=$GOROOT/bin:$PATH
}

# fromGithub downloads owner/repo from Github into g/src/github.com/owner/repo.
function fromGithub {
    local TEMP="$1"
    local GITHUB="$2" # OWNER/REPO
    local BRANCH="$3"

    echo "$PROG: Getting $GITHUB (branch $BRANCH)"

    ( cd $TEMP
        mkdir -p g/src/github.com/$(dirname $GITHUB) && \
        cd g/src/github.com/$(dirname $GITHUB) && git clone -b $BRANCH --single-branch --depth 1 https://github.com/$GITHUB
    )
}

function versionCheck() {
    local WANTVERSION=$1
    local GITHUB=$2
    (cd $GITHUB;
        COREVERSION=$(make DOCKER=$DOCKER -f Makefile.release version)
        if [[ "$COREVERSION" != "$WANTVERSION" ]]; then
            echo "$PROG: Want version $WANTVERSION, got version $COREVERSION, aborting build"
            exit 1
        fi
        echo "$PROG: Version OK: $WANTVERSION = $COREVERSION"
    )
}

if [[ "$TESTING" == "ON" ]]; then
    TEMP=$(mktemp -d)

    latestGo $TEMP
    setupGo $TEMP
    fromGithub $TEMP $GITHUB $BRANCH
    versionCheck $WANTVERSION $TEMP/g/src/github.com/$GITHUB

    echo "$PROG: Test building $GITHUB (branch $BRANCH) in $TEMP/g/src/github.com/$GITHUB"
    echo "$PROG: PATH is $PATH"

    ( cd $TEMP/g/src/github.com/$GITHUB
        make DOCKER=$DOCKER -f Makefile.release release
        make DOCKER=$DOCKER -f Makefile.release docker
    )

    echo "$PROG: This was a test run. Please remove $TEMP at your leisure."

    exit 0
fi

if [[ -z "$GITHUB_ACCESS_TOKEN" ]]; then
    echo "$PROG: No GITHUB_ACCESS_TOKEN set"
    exit 1
fi
if [[ -z "$DOCKER_LOGIN" ]]; then
    echo "$PROG: No DOCKER_LOGIN set"
    exit 1
fi
if [[ -z "$DOCKER_PASSWORD" ]]; then
    echo "$PROG: No DOCKER_PASSWORD set"
    exit 1
fi

TEMP=$(mktemp -d); function d1 { chown -R +wx $TEMP; rm -rf $TEMP; }; trap d1 EXIT

latestGo $TEMP
setupGo $TEMP
fromGithub $TEMP $GITHUB $BRANCH
versionCheck $WANTVERSION $TEMP/g/src/github.com/$GITHUB

echo "$PROG: Building $GITHUB (branch $BRANCH) in $TEMP/g/src/github.com/$GITHUB"
echo "$PROG: PATH is $PATH"

( cd $TEMP/g/src/github.com/$GITHUB
    make DOCKER=$DOCKER -f Makefile.release release
    make DOCKER=$DOCKER -f Makefile.release docker
    make DOCKER=$DOCKER -f Makefile.release github-push
    make DOCKER=$DOCKER -f Makefile.release docker-push
)
