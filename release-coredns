#!/bin/bash -e

# This release script downloads the latest Go and CoreDNS, sets things up and
# then calls into the Makefile to do the release. This script must be
# pre-configured on the (Linux) machine doing the release.
#
# Synopsis
# release-coredns [-t] [BRANCH]
#
# -t: test run, only compile, don't upload anything
# BRANCH is optional branch to use for the release; defaults to 'master'.

PROG=$(basename $0)

GITHUB=coredns/coredns
BRANCH=master
TESTING=

if [[ $1 -eq "-t" ]]; then
    TESTING=ON
    shift
fi
if [[ -n "$1" ]]; then
    BRANCH="$1"
fi

# latestGO downloads the latest version of Go (or used a cached download from /tmp).
function latestGo {
    local TEMP="$1"

    local LATEST=$(curl -s https://golang.org/VERSION?m=text)
    local GOLANG=https://dl.google.com/go/${LATEST}.linux-amd64.tar.gz

    TAR=$(basename $GOLANG)

    ( cd $TEMP
        if [[ ! -e /tmp/$TAR ]]; then
            echo "$PROG: Downloading: $GOLANG"

            wget -q $GOLANG
            cp $TAR /tmp

        else
            echo "$PROG: Using cached version of: $GOLANG"

            cp /tmp/$TAR .
        fi
    )
}

# setupGo extracts Go and exports GOROOT and GOPATH to get a compile confined to the tmp dir.
function setupGo {
    local TEMP="$1"

    echo "$PROG: Setting up Go in $TEMP"

    ( cd $TEMP; tar xf $TAR )
    export GOROOT=$TEMP/go
    PATH=$GOROOT/bin:$PATH
    export GOPATH=$TEMP/g
}

# fromGithub downloads owner/repo from Github into g/src/github.com/owner/repo.
function fromGithub {
    local TEMP="$1"
    local GITHUB="$2" # OWNER/REPO
    local BRANCH="$3"

    echo "$PROG: Getting $GITHUB (branch $BRANCH)"

    ( cd $TEMP
        mkdir -p g/src/github.com/$(dirname $GITHUB) && \
        cd g/src/github.com/$(dirname $GITHUB) && git clone -b $BRANCH --single-branch --depth 1 https://github.com/$GITHUB
    )
}

if [[ -n "$TESTING" ]]; then
    TEMP=$(mktemp -d)

    latestGo $TEMP
    setupGo $TEMP
    fromGithub $TEMP $GITHUB $BRANCH

    echo "$PROG: Test building $GITHUB (branch $BRANCH) in $TEMP/g/src/github.com/$GITHUB"

    ( cd $TEMP/g/src/github.com/$GITHUB
        make DOCKER=miekg -f Makefile.release release
        make DOCKER=miekg -f Makefile.release docker
    )

    echo "$PROG: Please remove $TEMP at your leisure"

    exit 0
fi

if [[ -z "$GITHUB_ACCESS_TOKEN" ]]; then
    echo "$PROG: No GITHUB_ACCESS_TOKEN set"
    exit 1
fi
if [[ -z "$DOCKER_LOGIN" ]]; then
    echo "$PROG: No DOCKER_LOGIN set"
    exit 1
fi
if [[ -z "$DOCKER_PASSWORD" ]]; then
    echo "$PROG: No DOCKER_PASSWORD set"
    exit 1
fi

TEMP=$(mktemp -d); function d1 { rm -rf $TEMP; }; trap d1 EXIT

latestGo $TEMP
setupGo $TEMP
fromGithub $TEMP $GITHUB $BRANCH

echo "$PROG: Building $GITHUB (branch $BRANCH) in $TEMP/g/src/github.com/$GITHUB"

( cd $TEMP/g/src/github.com/$GITHUB
    make DOCKER=miekg -f Makefile.release release
    #make DOCKER=miekg -f Makefile.release github-push
    #make DOCKER=miekg -f Makefile.release docker
    #make DOCKER=miekg -f Makefile.release docker-push
)
